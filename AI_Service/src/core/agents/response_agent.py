import json

import openai

from src.repositories.redis_client import WorkerRedisClient
from src.utils.dependency_manager import DependencyManager
from src.utils.orchestration_service_client import OrchestrationServiceClient


def invoke_response_agent(
    task_id: str, job_id: str, dependency_manager: DependencyManager
):
    worker_redis_client: WorkerRedisClient = dependency_manager.get_dependency(
        "worker_redis_client"
    )
    orchestration_service_client: OrchestrationServiceClient = (
        dependency_manager.get_dependency("orchestration_service_client")
    )

    summary, user_goal, user_query = worker_redis_client.get_job_data(
        job_id, ["summary", "user_goal", "user_input"]
    )

    prompt = (
        "You're a response agent in a 'retrieval and generation' system designed to provide context-specific responses to user queries. "
        "Your role is to take in a 'summary' (a long string of summary information which has been generated by a summarization agent) and generate a response to the user query."
        "You are also provided with a 'user_goal' (alonside the original user input) which is the goal the system should aim to complete. Use this to guide your response."
        "Respond in JSON (and nothing else aside from the JSON object) with a 'response' field:"
        "response: A response to the user query, guided by the 'user_goal'. This should be a string that directly answers the user query."
        "You should use the 'summary' to guide your response, ensuring that the information is relevant and accurate. Try not to use your own knowledge, only use the information in the summary."
        "This is a response back to the user for their question, so act as if you are directly responding to the user. Do also ensure that you reponse is verbose and covers as much information in the summary as possible."
        "The user has waited for this response, so ensure that it is as complete as possible so follow up questions are not needed."
        "Your response should be well structured and typically IN PARAGRAPHS to ensure a good flowing response."
        "Try to write your response as an answer, or as you feel to be the best way of responding to the user. Stay professional and polite, and ensure that the response is as complete as possible."
        "If you didn't find any information in the summary to answer the user query, just respond with a nice message saying you couldn't find the information. As such, try make responses longer than just a few sentences."
        "The 'response' field must be present and a string."
    )

    llm_response = openai.chat.completions.create(
        model="gpt-3.5-turbo-0125",
        response_format={"type": "json_object"},
        messages=[
            {
                "role": "system",
                "content": str(prompt),
            },
            {
                "role": "user",
                "content": json.dumps(
                    {
                        "summary": summary,
                        "user_goal": user_goal,
                        "user_input": user_query,
                    }
                ),
            },
        ],
    )

    response = llm_response.choices[0].message.content
    response = json.loads(response)
    print(response, flush=True)
    print(
        (llm_response.usage.prompt_tokens * 0.0000005)
        + (llm_response.usage.completion_tokens * 0.0000015),
        flush=True,
    )

    orchestration_service_client.notify_job(
        task_id, {"type": "NOTIFY", "message": "Generated response."}
    )
    orchestration_service_client.notify_job(
        task_id, {"type": "RETURN", "response": response["response"]}
    )
    # orchestration_service_client.task_completed(task_id)
